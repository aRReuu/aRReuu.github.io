<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AOP设计模式总结</title>
      <link href="/2019/09/06/AOP%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/06/AOP%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>#AOP设计模式总结</p><h5 id="AOP-Aspect-Oriented-Programming-面向切面编程"><a href="#AOP-Aspect-Oriented-Programming-面向切面编程" class="headerlink" title="AOP: Aspect Oriented Programming 面向切面编程"></a>AOP: Aspect Oriented Programming 面向切面编程</h5><p>######它是一种在不修改源码的情况下，引入新增功能的模式</p><h5 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h5><p>######类方法的指针</p><h5 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h5><p>######函数指针</p><p>####AOP优势</p><ul><li>对业务逻辑进行适当分离</li><li>提高复用率，降低耦合</li></ul><p>####场景<br>数据埋点，日志记录，hook底层实现或更改方法返回值</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS响应链</title>
      <link href="/2019/09/05/iOS%E5%93%8D%E5%BA%94%E9%93%BE/"/>
      <url>/2019/09/05/iOS%E5%93%8D%E5%BA%94%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p>#iOS Responder Chain总结</p><p>###响应链基本概念<br>应用程序使用响应程序（<strong>任何实例UIResponder的类或子类</strong>）对象接收和处理事件,而响应程序的对象的有序集合就形成了响应链。</p><p>###响应者链的传递流程图<br><img src="https://github.com/aReuuuuu/blogImage/blob/master/responderChain.jpg" srcset="/img/loading.gif" alt="ResponderChain" title="ResponderChain"></p><p>流程如上，如果普通控件（btn,label,tf）不处理事件，UIKit会将事件发送到其父UIView对象，然后是窗口的根视图。从根视图开始，响应器链在将事件定向到窗口之前转移到拥有的视图控制器。如果窗口无法处理事件，UIKit会将事件传递给UIApplication对象，如果该对象是UIResponder响应者链的实例而不是响应者链的一部分，则可能传递给应用程序委托（delegate）。</p><p>###内部实现</p><h4 id="1-寻找响应者，通过调用以下方法执行"><a href="#1-寻找响应者，通过调用以下方法执行" class="headerlink" title="1.寻找响应者，通过调用以下方法执行"></a>1.寻找响应者，通过调用以下方法执行</h4><pre><code class="hljs objective-c">//返回视图层结构中（包括其自身）的最终响应视图open func hitTest(_ point: CGPoint, with event: UIEvent?) -&gt; UIView?//判断点击事件的坐标是否在当前视图层   open func point(inside point: CGPoint, with event: UIEvent?) -&gt; Bool//坐标系数值转换open func convert(_ point: CGPoint, from view: UIView?) -&gt; CGPoint</code></pre><p>这里通过hook以上两个方法了解内部实现，输出日志代码：</p><pre><code class="hljs objective-c">hitTest:UIWindowpoint:UIWindowpointView:UIWindow ---Result: truehitTest:UILayoutContainerViewpoint:UILayoutContainerViewpointView:UILayoutContainerView ---Result: truehitTest:UINavigationBarpoint:UINavigationBarpointView:UINavigationBar ---Result: falsehitTestView: NSNull hitTest:UINavigationTransitionViewpoint:UINavigationTransitionViewpointView:UINavigationTransitionView ---Result: truehitTest:UIViewControllerWrapperViewpoint:UIViewControllerWrapperViewpointView:UIViewControllerWrapperView ---Result: truehitTest:UIViewpoint:UIViewpointView:UIView ---Result: truehitTest:UIViewpoint:UIViewpointView:UIView ---Result: truehitTest:PracticeMyself.ResponderViewhitTestView: NSNull hitTestView: UIView hitTestView: UIView hitTestView: UIView hitTestView: UIView hitTestView: UIView hitTestView: UIView hitTest:UIStatusBarWindowpoint:UIStatusBarWindowpointView:UIStatusBarWindow ---Result: truehitTest:UIStatusBarpoint:UIStatusBarpointView:UIStatusBar ---Result: false...hitTest:UIViewpoint:UIViewpointView:UIView ---Result: truehitTest:UIViewpoint:UIViewpointView:UIView ---Result: truehitTest:PracticeMyself.ResponderViewhitTestView: NSNull hitTestView: UIView hitTestView: UIView hitTestView: UIView hitTestView: UIView hitTestView: UIView hitTestView: UIView 点击触发: UIView</code></pre><p>另外结合网上资料，大概了解到查找响应视图的<code>hitTest</code>方法，其内部使用了递归遍历子代视图层来实现查找功能。</p><pre><code class="hljs objective-c">override func hitTest(_ point: CGPoint, with event: UIEvent?) -&gt; UIView?&#123;    if (!isUserInteractionEnabled || alpha == 0 || isHidden)&#123; return nil &#125;    let isInside = self.point(inside: point, with: event)    if isInside &#123;        //        guard self.subviews.count &gt; 0 else &#123; return self&#125;        for subview in self.subviews &#123;            //translate            let subPoint = subview.convert(point, from: self)            let subHitView = subview.hitTest(subPoint, with: event)            //继续遍历            if subHitView != nil&#123;                return subHitView            &#125;        &#125;    &#125;    return nil&#125;</code></pre><p>###响应链实际应用</p><h5 id="1-更改控件响应范围（闲鱼底部tabbar）"><a href="#1-更改控件响应范围（闲鱼底部tabbar）" class="headerlink" title="1.更改控件响应范围（闲鱼底部tabbar）"></a>1.更改控件响应范围（闲鱼底部tabbar）</h5><pre><code>TODO 附上demo</code></pre><h5 id="2-穿透"><a href="#2-穿透" class="headerlink" title="2.穿透"></a>2.穿透</h5><p> 直接把子类视图禁止交互或者隐藏，设置透明度少于等于0.01</p><p>参考资料：<a href="https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/using_responders_and_the_responder_chain_to_handle_events" title="Using Responders and the Responder Chain to Handle Events" target="_blank" rel="noopener">Using Responders and the Responder Chain to Handle Events</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP Header参数</title>
      <link href="/2018/10/20/HTTP%20Header%E5%8F%82%E6%95%B0/"/>
      <url>/2018/10/20/HTTP%20Header%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h5 id="HTTP-HyperTextTransferProtocol-超文本传输协议，是目前网页出传输的通用协议，同时采用了请求-响应的模式，就整个网络资源传输而言，包括message-header和message-body（http-header）两个部分，而header通常会分为四个部分：general-header-request-header-response-header-entity-header-但是日常规定中，总体分为Requese和Response两部分"><a href="#HTTP-HyperTextTransferProtocol-超文本传输协议，是目前网页出传输的通用协议，同时采用了请求-响应的模式，就整个网络资源传输而言，包括message-header和message-body（http-header）两个部分，而header通常会分为四个部分：general-header-request-header-response-header-entity-header-但是日常规定中，总体分为Requese和Response两部分" class="headerlink" title="HTTP(HyperTextTransferProtocol)超文本传输协议，是目前网页出传输的通用协议，同时采用了请求/响应的模式，就整个网络资源传输而言，包括message-header和message-body（http header）两个部分，而header通常会分为四个部分：general,header,request-header,response header,entity header.但是日常规定中，总体分为Requese和Response两部分"></a>HTTP(HyperTextTransferProtocol)超文本传输协议，是目前网页出传输的通用协议，同时采用了请求/响应的模式，就整个网络资源传输而言，包括message-header和message-body（http header）两个部分，而header通常会分为四个部分：<strong>general,header,request-header,response header,entity header</strong>.但是日常规定中，总体分为<code>Requese</code>和<code>Response</code>两部分</h5><p>###Requests部分<br>|Header|解释|示例|<br>| ———— | ———— | ———— |<br>| Accept  | 指定客户端能够接收的内容类型  | Accept: text/plain, text/html  |<br>|Accept-Charset|浏览器可以接受的字符编码集。|Accept-Charset: iso-8859-5|<br>|Accept-Encoding|指定浏览器可以支持的web服务器返回内容压缩编码类型。|Accept-Encoding: compress, gzip|<br>|Accept-Language    |浏览器可接受的语言    |Accept-Language: en,zh|<br>|Authorization    |HTTP授权的授权证书    |Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==|<br>|Connection    |表示是否需要持久连接。（HTTP 1.1默认进行持久连接）    |Connection: close<br>|Content-Length|请求的内容长度|    Content-Length: 348|<br>|Content-Type|    请求的与实体对应的MIME信息    |Content-Type: application/x-www-form-urlencoded|<br>|Date    |请求发送的日期和时间    |Date: Tue, 15 Nov 2010 08:12:31 GMT<br>|User-Agent    |User-Agent的内容包含发出请求的用户信息    |User-Agent: Mozilla/5.0 (Linux; X11)</p><p>###Responses 常见部分<br>|Header|解释|示例|<br>| ———— | ———— | ———— |<br>|Age    |从原始服务器到代理缓存形成的估算时间（以秒计，非负）|    Age: 12|<br>|Allow|    对某网络资源的有效的请求行为，不允许则返回405    |Allow: GET, HEAD|<br>|Content-MD5|    返回资源的MD5校验值|    Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==|<br>|Date    |原始服务器消息发出的时间    |Date: Tue, 15 Nov 2010 08:12:31 GMT|<br>|Expires    |响应过期的日期和时间    |Expires: Thu, 01 Dec 2010 16:00:00 GMT|<br>|refresh|    应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）|Refresh: 5; url=<a href="http://www.zcmhi.com/archives/94.html" target="_blank" rel="noopener">http://www.zcmhi.com/archives/94.html</a> |<br>|Retry-After|    如果实体暂时不可取，通知客户端在指定时间之后再次尝试    |Retry-After: 120|</p><hr><p>#####其中Request请求里的Content-Type类型，分为以下几种：<code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code>，<code>text/plain</code>。</p><ol><li><code>application/x-www-form-urlencoded</code>：数据被编码为key-value形式，为标准格式编码。</li><li><code>multipart/form-data</code>：通常将表单中的数据处理为一条消息，以标签为单元，用分隔符分开，既可以上唇啊机制对，也可以<strong>上传文件</strong>。当上传文件时，content-disposition包含文件基本信息。</li><li><code>text/plain</code>：数据以纯文本形式（text/json/xml/html）进行编码，其中不包含控件或格式字符。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AsyncDisplayKit核心源码分析</title>
      <link href="/2018/09/15/AsyncDisplayKit%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2018/09/15/AsyncDisplayKit%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在ASDK中，所有视图控件的基类都是 <code>ASDisplayNode</code>,它是对 <code>UIView</code> 和 <code>CALayer</code> 的抽象，并且允许你对视图进行计算主线程的层次结构，也可以渲染主线程。而最重要的是，这个类是<strong>线程安全</strong>的。当创建一个ASDisplayNode并且添加到当前视图后，view/layer的get方法总是先被调用：</p><pre><code class="hljs undefined">#pragma mark - Misc Setter / Getter- (UIView *)view&#123;  ...  if (!_view) &#123;    [self _loadViewOrLayerIsLayerBacked:NO];  &#125;  return _view;&#125;- (CALayer *)layer&#123;  if (!_layer) &#123;...    [self _loadViewOrLayerIsLayerBacked:YES];  &#125;  return _layer;&#125;</code></pre><p>而它们都会分别调用到<code>- (void)_loadViewOrLayerIsLayerBacked:(BOOL)isLayerBacked</code>这个方法，其中<code>isLayerBacked</code>表示<strong>层处理</strong>，当其值为true时，会放弃对当前View的创建，从而优化性能，节省不必要的渲染时间。</p><pre><code class="hljs undefined">- (void)_loadViewOrLayerIsLayerBacked:(BOOL)isLayerBacked&#123;  if (isLayerBacked) &#123;    TIME_SCOPED(_debugTimeToCreateView);    _layer = [self _layerToLoad];    static int ASLayerDelegateAssociationKey;    ASWeakProxy *instance = [ASWeakProxy weakProxyWithTarget:self];    _layer.delegate = (id&amp;amp;lt;CALayerDelegate&amp;amp;gt;)instance;    objc_setAssociatedObject(_layer, &amp;amp;amp;ASLayerDelegateAssociationKey, instance, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&#125; else &#123;    TIME_SCOPED(_debugTimeToCreateView);    _view = [self _viewToLoad];    _view.asyncdisplaykit_node = self;    _layer = _view.layer;  &#125;    _layer.asyncdisplaykit_node = self;  self.asyncLayer.asyncDelegate = self;    &#123;    TIME_SCOPED(_debugTimeToApplyPendingState);    [self _applyPendingStateToViewOrLayer];  &#125;    &#123;    TIME_SCOPED(_debugTimeToAddSubnodeViews);    [self _addSubnodeViewsAndLayers];  &#125;    &#123;    TIME_SCOPED(_debugTimeForDidLoad);    [self __didLoad];  &#125;&#125;</code></pre><p>从<code>self.asyncLayer.asyncDelegate = self;</code>可以见到<code>ASDisplayNode</code>成为了<code>_ASDisplayLayer</code>的代理，以管理CALayer的操作。其后，方法内部的<code>_applyPendingStateToViewOrLayer</code>会让layer执行<code>setNeedsDisplay</code>并且标记自身，进行内容的绘制操作。最后在<code>_ASDisplayLayer</code>中实现display方法：</p><pre><code class="hljs undefined">- (void)display&#123;  ...  [self display:self.displaysAsynchronously];     ...     [strongAsyncDelegate displayAsyncLayer:self asynchronously:asynchronously];&#125;</code></pre><p>接下来也就是最<strong>核心和关键</strong>的部分。所有的优化操作都会在<code>displayAsyncLayer</code>这个方法中实现，其中分为以下三部分：</p><ul><li>任务<strong>displayBlock</strong>的构建（其中包括视图绘制，<strong>rasterize光栅化</strong>处理）</li><li>管理绘制事务，由三个部分组成，分别是<code>_ASAsyncTransactionGroup</code>、<code>_ASAsyncTransactionContainer</code> 以及 <code>_ASAsyncTransaction</code></li><li>GCD异步并发调度任务</li></ul><p>我们先来看一下精简之后的源码，并分别对内部操作进行一一分析：</p><pre><code class="hljs undefined">- (void)displayAsyncLayer:(_ASDisplayLayer *)asyncLayer asynchronously:(BOOL)asynchronously&#123;...    asyncdisplaykit_async_transaction_operation_block_t displayBlock = [self _displayBlockWithAsynchronous:asynchronously isCancelledBlock:isCancelledBlock rasterizing:NO];    // 再绘制执行完成后进行block回调操作，当前回调在主线程上进行 asyncdisplaykit_async_transaction_operation_completion_block_t completionBlock = ^(id&amp;amp;lt;NSObject&amp;amp;gt; value, BOOL canceled)&#123;        if (!canceled &amp;amp;amp;&amp;amp;amp; !isCancelledBlock()) &#123;...            if (stretchable) &#123; ASDisplayNodeSetupLayerContentsWithResizableImage(_layer, image);            &#125; else &#123;//填充绘制后的视图内容                _layer.contentsScale = self.contentsScale;                _layer.contents = (id)image.CGImage;            &#125;...        &#125;    &#125;;    if (asynchronously) &#123;        _ASAsyncTransaction *transaction = containerLayer.asyncdisplaykit_asyncTransaction;        //将displayBlock以及completion放进添加到事务上，通过GCD异步并发调度所有绘制任务        [transaction addOperationWithBlock:displayBlock priority:self.drawingPriority queue:[_ASDisplayLayer displayQueue] completion:completionBlock];    &#125; else &#123;        UIImage *contents = (UIImage *)displayBlock();        completionBlock(contents, NO);    &#125;&#125;</code></pre><p>1.<strong>任务displayBlock的构建</strong></p><pre><code class="hljs undefined">asyncdisplaykit_async_transaction_operation_block_t displayBlock = [self _displayBlockWithAsynchronous:asynchronously isCancelledBlock:isCancelledBlock rasterizing:NO];</code></pre><p>这里构建了<code>asyncdisplaykit_async_transaction_operation_block_t</code>类型的displayBlock，是一个用以在委托上调用绘制并返回视图内容进行显示的模块封装，其内部为<strong>光栅化</strong>以及<strong>内容绘制</strong>的实现：</p><pre><code class="hljs undefined">if (shouldBeginRasterizing) &#123;    //递归子视图进行光栅化操作    [self _recursivelyRasterizeSelfAndSublayersWithIsCancelledBlock:isCancelledBlock displayBlocks:displayBlocks];&#125;...    //构建displayBlock绘制操作displayBlock = ^id&#123;      CHECK_CANCELLED_AND_RETURN_NIL();      UIGraphicsBeginImageContextWithOptions(bounds.size, opaque, contentsScaleForDisplay);...      for (dispatch_block_t block in displayBlocks) &#123;        block();      &#125;  ...      UIImage *image = UIGraphicsGetImageFromCurrentImageContext();      UIGraphicsEndImageContext();      ASDN_DELAY_FOR_DISPLAY();      return image;    &#125;;</code></pre><p>代码继续往下走，其中当判断<code>asynchronously</code>为false时，当前封装好的绘制任务<code>displayBlock</code>将会被同步执行，然后执行<code>completionBlock</code>回调，更新layer所显示的内容。否则的话，block会被封装成一个事务，添加到队列中执行，再执行异步绘制操作。</p><p>2.<strong>建立管理绘制事务</strong></p><pre><code class="hljs undefined">_ASAsyncTransaction *transaction = containerLayer.asyncdisplaykit_asyncTransaction;//实现- (_ASAsyncTransaction *)asyncdisplaykit_asyncTransaction&#123;...    if (transaction == nil) &#123;        NSHashTable *transactions = self.asyncdisplaykit_asyncLayerTransactions;        if (transactions == nil) &#123;            transactions = [NSHashTable hashTableWithOptions:NSPointerFunctionsObjectPointerPersonality];            self.asyncdisplaykit_asyncLayerTransactions = transactions;        &#125;        ...        [transactions addObject:transaction];        self.asyncdisplaykit_currentAsyncTransaction = transaction;    &#125;    [[_ASAsyncTransactionGroup mainTransactionGroup] addTransactionContainer:self];    return transaction;&#125;</code></pre><p>对于上述语句，创建了transaction任务并且添加到<code>_ASAsyncTransactionGroup</code>中进行管理，<code>_ASAsyncTransactionGroup</code> 会在初始化时，创建了，向 Runloop 中注册监听事件，当Runloop 在将要进入休眠与结束期间，提交 displayBlock执行的结果。</p><p>3.<strong>异步并发地派发绘制事务并马上执行内容绘制</strong></p><pre><code class="hljs undefined">[transaction addOperationWithBlock:displayBlock priority:self.drawingPriority queue:[_ASDisplayLayer displayQueue] completion:completionBlock];</code></pre><p>首先<code>[_ASDisplayLayer displayQueue]</code>队列的优先级别为<code>DISPATCH_QUEUE_PRIORITY_HIGH</code>,也就是说为了<strong>优先处理好UI渲染</strong>过程。期间内部进行如下处理：</p><pre><code class="hljs undefined">ASDisplayNodeAsyncTransactionOperation *operation = [[ASDisplayNodeAsyncTransactionOperation alloc] initWithOperationCompletionBlock:completion]; [_operations addObject:operation]; _group-&amp;amp;gt;schedule(priority, queue, ^&#123;   @autoreleasepool &#123;     operation.value = block();   &#125; &#125;);</code></pre><p><code>schedule</code>方法采取C++形式对GCD进行了封装,同时添加一些最大并发数、线程锁的功能，最后执行<code>operation._block();</code>操作，回调处理<code>operation.value = block();</code>将<code>displayBlock</code>的绘制任务实现并赋值给<code>ASDisplayNodeAsyncTransactionOperation</code>的实例<code>operation.value</code>.</p><pre><code class="hljs undefined">void ASAsyncTransactionQueue::GroupImpl::schedule(NSInteger priority, dispatch_queue_t queue, dispatch_block_t block)&#123;dispatch_async(queue, ^&#123;     ...      while (!entry._operationQueue.empty()) &#123;        ...        if (operation._block) &#123;          ASProfilingSignpostStart(3, operation._block);          operation._block();          ASProfilingSignpostEnd(3, operation._block);        &#125;        operation._group-&amp;amp;gt;leave();        operation._block = nil; // the block must be freed while mutex is unlocked        lock.lock();      &#125;  ...    &#125;);&#125;</code></pre><p>这个时候，虽然异步处理视图操作已经实现，但是并没有马上显示在界面上。而是当Runloop 在将要进入休眠与结束期间，已经注册了回调的管理事务类<code>_ASAsyncTransactionGroup</code>将会接收到通知，对每个<code>_ASAsyncTransaction</code>事务进行<code>commit</code>提交操作，把封装了的displayBlock回传，实现<code>completionBlock()</code>,使layer获取到绘制内容并呈现到显示屏上。下面将会用调用栈进行解释：</p><pre><code class="hljs undefined">-[_transactionGroupRunLoopObserverCallback]-[_ASAsyncTransactionGroup commit] -[_ASAsyncTransaction commit] -[_ASAsyncTransaction completeTransaction]-[ASAsyncTransactionOperation callAndReleaseCompletionBlock]_operationCompletionBlock(self.value, canceled);</code></pre><p>最后，当异步绘制任务完成后，block会在<strong>主线程</strong>中回调到<code>- (void)displayAsyncLayer:(_ASDisplayLayer *)asyncLayer asynchronously:(BOOL)asynchronously</code>方法里的<code>completionBlock</code>实现中，并将内容复制给<code>_layer</code>的<code>contents</code>属性。至此，ASDK的整个绘制视图并显示的界面上的过程就结束了。</p><pre><code class="hljs undefined">asyncdisplaykit_async_transaction_operation_completion_block_t completionBlock = ^(id&amp;amp;lt;NSObject&amp;amp;gt; value, BOOL canceled)&#123;    ASDisplayNodeCAssertMainThread();    if (!canceled &amp;amp;amp;&amp;amp;amp; !isCancelledBlock()) &#123;      UIImage *image = (UIImage *)value;      BOOL stretchable = (NO == UIEdgeInsetsEqualToEdgeInsets(image.capInsets, UIEdgeInsetsZero));      if (stretchable) &#123; ASDisplayNodeSetupLayerContentsWithResizableImage(_layer, image);      &#125; else &#123;        _layer.contentsScale = self.contentsScale;        _layer.contents = (id)image.CGImage;      &#125;      [self didDisplayAsyncLayer:self.asyncLayer];    &#125;  &#125;;</code></pre><p>####总结<br>AsyncDisplayKit为了保持界面流畅性，整个过程做了三大部分的处理：<br>1.利用<strong>UIGraphics实现视图绘制</strong>以及进行<strong>rasterize光栅化处理</strong>，并且将实现封装在<strong>displayBlock</strong>块中。<br>2.建立绘制事务的<strong>管理</strong>，对需要处理的<strong>displayBlock</strong>进行容器封装，涉及到的类分别是<code>_ASAsyncTransactionGroup</code>、<code>_ASAsyncTransactionContainer</code> 以及 <code>_ASAsyncTransaction</code>。期间<code>_ASAsyncTransactionGroup</code>注册Runloop监听事件，并且在每一次Runloop将要进入休眠及结束时<strong>commit</strong>已绘制完成的任务，让<strong>_layer</strong>视图进行完成赋值并更新的操作。<br>3.利用GCD异步并发调用所有绘制事务，从而减轻主线程负担。</p><p><strong>引用</strong><br>[《iOS 保持界面流畅的技巧》](<a href="https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/#43" target="_blank" rel="noopener">https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/#43</a> &amp;quot;iOS 保持界面流畅的技巧&amp;quot;)<br>[提升界面渲染性能](<a href="https://zhuanlan.zhihu.com/p/22255533?refer=iOS-Source-Code" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22255533?refer=iOS-Source-Code</a> &amp;quot;提升界面渲染性能&amp;quot;)</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主线程更新UI</title>
      <link href="/2018/09/02/%E4%B8%BB%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0UI/"/>
      <url>/2018/09/02/%E4%B8%BB%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0UI/</url>
      
        <content type="html"><![CDATA[<h5 id="1-UIApplication所处线程"><a href="#1-UIApplication所处线程" class="headerlink" title="1. UIApplication所处线程"></a>1. UIApplication所处线程</h5><p>在 Cocoa Touch,  UIApplication是在主线程上创建的，另外也包括视图控制器及其viewDidLoad等方法的使用，也是处于主线程之中。</p><h5 id="2-图形渲染：图形管道最终是同步的"><a href="#2-图形渲染：图形管道最终是同步的" class="headerlink" title="2. 图形渲染：图形管道最终是同步的"></a>2. 图形渲染：图形管道最终是同步的</h5><p>&lt;blockquote&gt;<br><em>引用ibireme原话：<br>在 VSync 信号到来后，系统图形服务会通过 CADisplayLink 等机制通知 App，App 主线程开始在 CPU 中计算显示内容，比如视图的创建、布局计算、图片解码、文本绘制等。随后 CPU 会将计算好的内容提交到 GPU 去，由 GPU 进行变换、合成、渲染。随后 GPU 会把渲染结果提交到帧缓冲区去，等待下一次 VSync 信号到来时显示到屏幕上。</em><br>&lt;/blockquote&gt; </p><h5 id="3-UIKit线程不安全-而苹果的-官方文档-https-developer-apple-com-documentation-code-diagnostics-main-thread-checker-quot-官方文档-quot-也有对应的描述"><a href="#3-UIKit线程不安全-而苹果的-官方文档-https-developer-apple-com-documentation-code-diagnostics-main-thread-checker-quot-官方文档-quot-也有对应的描述" class="headerlink" title="3. UIKit线程不安全  而苹果的[官方文档](https://developer.apple.com/documentation/code_diagnostics/main_thread_checker &quot;官方文档&quot;)也有对应的描述:"></a>3. UIKit线程不安全  而苹果的[官方文档](<a href="https://developer.apple.com/documentation/code_diagnostics/main_thread_checker" target="_blank" rel="noopener">https://developer.apple.com/documentation/code_diagnostics/main_thread_checker</a> &quot;官方文档&quot;)也有对应的描述:</h5><p><em>Overview<br>The Main Thread Checker is a standalone tool for Swift and C languages that detects invalid usage of AppKit, UIKit, and other APIs on a background thread. *</em>Updating UI on a thread other than the main thread is a common mistake that can result in missed UI updates, visual defects, data corruptions, and crashes.***</p><p>当然,仅仅是这样解释的话明显是不够说服力的,下面我们用代码进行证明:</p><ul><li>在主/子线程分别对tableView调用reloadData刷新若干cell的数据,并且在tableView下重写layoutSubviews方法:</li></ul><pre><code class="hljs objective-c">- (void)btnClicked&#123;    NSLog(@&amp;quot;主线程开始调用&amp;quot;);    [self.tableView reloadData];    //    [self performSelector:@selector(addTF:) withObject:@&amp;quot;1&amp;quot; afterDelay:3.0f];&#125;- (void)btnClicked1&#123;    NSLog(@&amp;quot;子线程开始调用&amp;quot;);    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123;        [self.tableView reloadData];    &#125;);&#125;//customTableView- (void)layoutSubviews&#123;    [super layoutSubviews];    NSLog(@&amp;quot;刷新完成&amp;quot;);&#125;</code></pre><p>测试结果如下:</p><pre><code class="hljs objective-c">//主线程17:52:40.481302 主线程开始调用17:52:40.487670 刷新完成//子线程17:53:18.788251 子线程开始调用17:53:24.306246 刷新完成</code></pre><ul><li>除了刷新cell数据,我们进一步在主/子线程进行视图绘制操作,先重写- drawRect函数,并绘制一条不规则曲线(代码省略)结果如下:</li></ul><pre><code class="hljs objective-c">//主线程2018-09-19 18:25:48.537847 主线程开始调用2018-09-19 18:25:48.538767 视图加载完成</code></pre><pre><code class="hljs undefined">//子线程2018-09-19 18:25:50. 子线程开始调用2018-09-19 18:25:56. 视图加载完成</code></pre><p>可见子线程上进行UI更新的操作并不能马上生效,略有延迟.这里也涉及到Runloop机制的原因.当改变了 Frame、更新了 UIView/CALayer 的层次时,或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后,这个 UIView/CALayer 就被标记为待处理,并被提交到一个全局的容器去.而苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件,回调去执行如下函数:</p><pre><code class="hljs objective-c">_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()</code></pre><p>期间会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面.但是对于在子线程而言,runloop是默认不开启的,因此子线程上刷新UI的方法不能马上被调用,从而没有及时看到UI界面的更新效果.<br>其调用栈大过程如下:</p><pre><code class="hljs objective-c">_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()    QuartzCore:CA::Transaction::observer_callback:        CA::Transaction::commit();            CA::Context::commit_transaction();                CA::Layer::layout_and_display_if_needed();                    CA::Layer::layout_if_needed();                        [CALayer layoutSublayers];                            [UIView layoutSubviews];                    CA::Layer::display_if_needed();                        [CALayer display];                            [UIView drawRect];</code></pre><p>因此,对于UI界面的操作,必须在主线程上进行更新.因为我们无法保证对于子线程上操作UI所带来的诸如及时更新或是线程安全等问题,另外对于用户体验至上的时代,这也是尤为重要.</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p> 是否只要在主线程上进行UI更新就一定是安全呢?</p><p>参考资料:<br>[深入理解RunLoop](<a href="https://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="noopener">https://blog.ibireme.com/2015/05/18/runloop/</a> &quot;深入理解RunLoop&quot;)</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel搭建博客</title>
      <link href="/2018/08/29/Laravel%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2018/08/29/Laravel%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="本文主要记录了一个基于阿里云服务器从0搭建个人博客的过程，也是我第一次使用Laravel编写的项目。下面会简要介绍整个搭建过程。"><a href="#本文主要记录了一个基于阿里云服务器从0搭建个人博客的过程，也是我第一次使用Laravel编写的项目。下面会简要介绍整个搭建过程。" class="headerlink" title="本文主要记录了一个基于阿里云服务器从0搭建个人博客的过程，也是我第一次使用Laravel编写的项目。下面会简要介绍整个搭建过程。"></a>本文主要记录了一个基于阿里云服务器从0搭建个人博客的过程，也是我第一次使用Laravel编写的项目。下面会简要介绍整个搭建过程。</h2><p>###环境部署</p><ul><li>在阿里云的管理控制台，先在安全组规则内设置常用的80以及(SQL)3306端口为允许状态（因为我申请的的是ECS专有网络，所以网卡类型只有内网），其他如443等端口有需要的可以自行设置。</li><li>安装基本软件，以及必要的PHP，MySQL以及Nginx组件。<pre><code class="hljs c">apt-get update<span class="hljs-comment">//语言包</span>sudo apt-get install -y language-pack-en-base   locale-gen en_US.UTF<span class="hljs-number">-8</span><span class="hljs-comment">//常用软件</span>sudo apt-get install -y vim git zip unzip</code></pre></li></ul><p>PHP7</p><pre><code class="hljs php">sudo apt-get install -y software-properties-commonsudo LC_ALL=en_US.UTF<span class="hljs-number">-8</span> add-apt-repository ppa:ondrej/phpsudo apt-get updateapt-cache search php7<span class="hljs-number">.1</span>sudo apt-get install -y php7<span class="hljs-number">.1</span>sudo apt-get install -y php7<span class="hljs-number">.1</span>-mysqlsudo apt-get install -y php7<span class="hljs-number">.1</span>-fpmsudo apt-get install -y php7<span class="hljs-number">.1</span>-curl php7<span class="hljs-number">.1</span>-xml php7<span class="hljs-number">.1</span>-mcrypt php7<span class="hljs-number">.1</span>-json php7<span class="hljs-number">.1</span>-gd php7<span class="hljs-number">.1</span>-mbstring</code></pre><p>MySQL</p><pre><code class="hljs undefined">//完成后会提示设置密码 sudo apt-get install -y mysql-server</code></pre><pre><code>Nginx，如果没有apache的跳过一下步骤</code></pre><pre><code class="hljs undefined">sudo service apache2 stop   //停止apache2   sudo apt-get --purge remove apache2     //卸载sudo apt-get --purge remove apache2.2-commonsudo apt-get autoremovesudo apt-get install -y nginx     //安装 nginx</code></pre><p>配置PHP以及Nginx</p><pre><code class="hljs undefined">sudo vim /etc/php/7.1/fpm/php.ini//修改 listen = /var/run/php7.1-fpm.socksudo vim /etc/php/7.1/fpm/pool.d/www.conf  //   Nginx的配置按需填写sudo vim /etc/nginx/sites-available/default   server &#123;        listen 80 default_server;        listen [::]:80 default_server;        root /var/www/你的项目名字/public;        index index.php index.html index.htm;        server_name 公网IP或域名;        location / &#123;            try_files $uri $uri/ /index.php?$query_string;        &#125;        location ~ \.php$ &#123;            try_files $uri /index.php =404;            fastcgi_split_path_info ^(.+\.php)(/.+)$;            fastcgi_pass unix:/var/run/php7.1-fpm.sock;            fastcgi_index index.php;            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;            include fastcgi_params;        &#125;    &#125;</code></pre><ul><li>接下来安装composer，这是目前比较流行的PHP的依赖管理器，详细见连接：[Composer – PHP依赖管理的新时代](<a href="https://link.jianshu.com/?t=http://www.phpcomposer.com/composer-the-new-age-of-dependency-manager-for-php" target="_blank" rel="noopener">https://link.jianshu.com/?t=http://www.phpcomposer.com/composer-the-new-age-of-dependency-manager-for-php</a> &amp;quot;Composer – PHP依赖管理的新时代&amp;quot;)<br>安装完成后把composer.char移动至bin目录下，方便在终端直接调用。<pre><code class="hljs undefined">mv composer.phar /usr/local/bin/composer</code></pre></li></ul><p>这里有两种方法添加Laravel项目到服务器上，首先要进入到 /var/www/文件夹下。第一种方法是创建新的项目，指令如下：</p><pre><code class="hljs undefined">//xxx项目名字composer create-project --prefer-dist laravel/laravel xxx</code></pre><p>而第二种方法，就是从github仓库端拉取项目代码过来直接使用。</p><pre><code class="hljs undefined">//xxx为仓库项目的地址git clone xxxxx//安装项目依赖composer install</code></pre><p>www/目录下存在项目后，需要修改.env隐藏文件的配置，其中里面包括与数据库MySQL连接，LaravelKey等重要配置，尤其是连接服务器本地数据库的设置，一定要填写正确！</p><pre><code class="hljs undefined"> //文件名字一定为mysql.lock,路径按需填写DB_SOCKET=/var/run/mysqld/mysql.sock</code></pre><p>进行数据迁移以及数据表生成：</p><pre><code class="hljs undefined">php artisan migrate</code></pre><p>接着是修改文件夹读写权限：</p><pre><code class="hljs undefined">sudo chown -R www-data:www-data /var/wwwsudo chmod -R 777 /var/www/laravel-project/storage</code></pre><p>基本设置都完成之后，重启Nginx和PHP进程管理器：</p><pre><code class="hljs undefined">service nginx restartservice php7.1-fpm restart</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最初以为服务器的部署只是简单几步就能完成，无非就是搭建个环境和安装一些必要组件，其后再把开发好的代码上传上去就OK了（而且网上也不乏类似的教程和文章）。可是随后才发现这两天的进度真的不尽人意，，先是在ubuntu上部署环境的时候配置不正确，导致了要么是SQL连接不通，要么就是Nginx和php页面指向不正确等一大堆问题，不过最后还是成功搞了出来。下一步打算继续完善这个博客的功能，并且以此记录我今后的学习的一点一滴。</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
